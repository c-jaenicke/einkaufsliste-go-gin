# docker compose for einkaufsliste PRODUCTION DEPLOYMENT
version: "3.9"

services:
  db:
    container_name: einkaufsliste-db
    hostname: einkaufsliste-db
    image: postgres:15
    restart: unless-stopped
    environment:
      # change values here!
      - POSTGRES_PASSWORD=<SET PASSWORD HERE>
      - POSTGRES_USER=<SET USERNAME HERE>
      - POSTGRES_DB=<SET DB NAME HERE>
    volumes:
      - einkaufsliste-db-volume:/var/lib/postgresql/data
    expose:
      - 5432
    networks:
      - int-einkaufsliste-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d <SET DB NAME HERE> -U <SET USERNAME HERE>" ]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    container_name: einkaufsliste-frontend
    hostname: einkaufsliste-frontend
    image: einkaufsliste-svelte:latest
    restart: unless-stopped
    environment:
      - "ORIGIN=<SET DOMAIN HERE, 127.0.0.1:3000 WHEN TESTING>"
    expose:
      - 3000
    networks:
      - int-einkaufsliste-net
    # add labels here for traefik

  # backend service, will only start after db is up
  backend:
    container_name: einkaufsliste-api
    hostname: einkaufsliste-api
    image: einkaufsliste-rest:latest
    restart: unless-stopped
    environment:
      # make sure to change values here! need to be the same as above!
      - DSS=host=einkaufsliste-db port=5432 user=<SET USERNAME HERE> dbname=<SET DB NAME HERE> password=<SET PASSWORD HERE> sslmode=disable]
      # this switches gin to release mode
      - GIN_MODE=release
    expose:
      - 8080
    networks:
      - int-einkaufsliste-net
      - int-docker-net
    depends_on:
      db:
        condition: service_healthy

volumes:
  # save database in this docker volume
  einkaufsliste-db-volume:

networks:
  # docket network for communication with reverse proxy
  int-docker-net:
    external: true
    name: int-docker-net
  # docket network for services to communicate with each other
  int-einkaufsliste-net:
